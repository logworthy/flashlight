library(Flashlight)
?shinyApp
?runApp
library(shiny)
?runApp
getOption('shiny.port')
getOption('shiny.launch.browser')
list.files()
file.info('Flashlight.Rproj')
file.mtime('Flashlight.Rproj')
list.files('.')
?list.files
list.files('.', recursive=T)
watch
root
root <- '.'
gen_filenames <- function() {
list.files(root, recursive=T, include.dirs=F, full.names =T)
}
gen_filenames()
?list.files
file.mtime(gen_filenames())
files
files <- gen_filenames()
files
?vector
?dmp
dmp
?dump
dump(c(foo='bar'))
foo <- c(bar=3)
dump('foo')
dump('foo', file="")
files
sort(files)
structure(file.mtime(files), .Names=files)
mtimes <- structure(file.mtime(files), .Names=files)
mtimes
mtimes
result <- check_files()
check_files <- function() {
files <- sort(gen_filenames())
structure(file.mtime(files), .Names=files)
}
result <- check_files()
result
mtime
mtimes
identical(result, mtimes)
all.equal(result, mtimes)
mtimes
result
result <- check_files()
all.equal(result, mtimes)
identical(result, mtimes)
result2 <- check_files()
identical(result, result2)
all.equal(result, result2)
?identical
library(futile.logger)
install.package('futile.logger')
install.packages('futile.logger')
library(futile.logger)
Sys.sleep(1)
library(futile.logger)
watch <- function(root) {
# get list of files
gen_filenames <- function() {
list.files(root, recursive=T, include.dirs=F, full.names =T)
}
# get modification times for files
check_files <- function() {
files <- sort(gen_filenames())
structure(file.mtime(files), .Names=files)
}
last_result <- check_files()
while(T) {
result <- check_files()
if(!identical(result, last_result)) {
last_result <- result
flog.info('File change detected, reloading...')
}
Sys.sleep(1)
}
}
FILE_MODIFIED = 1
file.mtime('Flashlight.Rproj')
watch('.')
?runApp
install.packages('supbrocess')
install.packages('subprocess')
?install.github
library(devtools)
install.packages('devtools')
library(devtools)
?install_github
install_github('RevolutionAnalytics/ravro/tree/master/pkg/ravro')
install_github('RevolutionAnalytics/ravro', subdir='/tree/master/pkg/ravro')
install_github('RevolutionAnalytics/ravro/pkg/ravro')
install.packages(c("Rcpp","rjson","bit64"))
library(Rcpp)
library(rjson)
library(bit64)
install.packages(c("rjson","bit64"))
install_github('RevolutionAnalytics/ravro/pkg/ravro')
install_github('RevolutionAnalytics/ravro/pkg/ravro')
library(devtools)
install_github('RevolutionAnalytics/ravro/pkg/ravro')
library(ravro)
library(ravro)
result <- read.avro(file.choose())
result <- read.avro(file.choose())
result <- read.avro(file.choose())
library(ravro)
result <- read.avro(file.choose())
library(ravro)
result <- read.avro(file.choose())
library(ravro)
result <- read.avro(file.choose())
str(result)
head(result)
str(result)
saveRDS(result, 'result.RDS')
?snow
library(snow)
library(Rserve)
install.packages('Rserve')
library(Rserve)
Rserve
?Rserve
foo <- Rserve(port=24601, wait=F)
install.packages('RSClient')
install.packages('RSclient')
library(RSclient)
?RSclient
?RS.connect
bar <- RS.connect(port=24601)
?runApp
bar
?RS.connect
?runApp
RS.server.shutdown(bar)
RS.close(bar)
foo
?foo
str(foo)
bar <- RS.connect(port=24601)
bar
?Rserve
RS.eval(bar, 'ls()')
?RS.eval
RS.eval(bar, '1o2kj3lk1j2')
RS.eval(bar, '1o2kj3lk1j2\n')
RS.close(bar)
?runDemo
?shiny
runExample()
library(shiny)
runExample()
runExample('01_hello')
runApp
?on.exit
?startApp
shiny:::startApp
?shiny:::startApp
?shiny:::startServer
shiny:::startServer
shiny:::startPipeServer
startServer
3.7+3.7+6.1+3.2
30+26+11+8+6
